Các bước thiết lập dự án:
- Cấu hình chung
    + Tạo dự án product-management
    + Khởi tạo NPM: npm init
    + Cài đặt Express: npm i express
    + Cài đặt Nodemon: npm i --save-dev nodemon
    + Sửa file package.json: "start": "nodemon --inspect index.js"
    + Tạo file index.js trong thư mục gốc

*** Trang client
- Cài đặt PUG
- Tạo views
    + Tạo folder client (phân biệt giữa giao diện và admin)
        + tạo folder pages (quản lý các trang trong project )
            + tạo folder home (giao diện chung của trang chủ)
            + tạo folder products (giao diện chung của trang sản phẩm)

        + tạo folder layouts: chứa layouts chung của giao diện
            + file default.pug

        + tạo folder partials chứ header và footer chung 
            + file header.pug 
            + file footer.pug

        + tạo folder mixins: chứa phần tử chung của các trang

- Cấu hình folder routes
    + tạo folder client 
        + tạo file index.routes.js để chứa các route tổng.
        + tạo file products.router.js
        + tạo file home.products.js chứa các route của product

- Cấu hình folder controllers
    + tạo foler client
        + tạo file home.controller.js
        + tạo file products.controller.js

- Cấu hình .env: file này chứa các dữ liệu private (cổng port, cổng database)
    + sử dụng câu lệnh npm i dotenv để sử dụng 

- Cấu trúc lại folder PUG

- Tạo folder public để nhúng file tĩnh
    + file css, js, images

- Kết nối mongoose
    + sử dụng lệnh: npm i mongoose

-Tạo file gitignore (để khi push code lên github thì ko push các file quan trọng)

-Luồng chạy
    Trong file index.js sẽ là file tổng hợp tất cả

    - routes: 
        + file index sẽ là nơi chứa tất cả các route có trong project (chứa cả home và product)

        + sau đó sẽ import file index.route vào trong file index.js

    -controller: 
        + là nơi mà để render code từ file pug lên giao diện thì 

        + đoạn code trong file controller sẽ được sử dụng trong các file router với từng trang tương ứng

    - config : dùng để lưu các cấu hình của dự án 
        + như lưu đường dẫn đến database

    -view:
        + file default.pug trong folder layouts sẽ là tổng giao diện của project là
            nơi chứa các đường dẫn link bootstrap, css, js

        + Phần block main là để cho các file index trong home hay products kế thừa 
            và ta sẽ vẽ giao diện ở trong file được kế thừa (là 2 file trong folder home và product trong folder pages)

        + trong folder partials sẽ có 2 file là header và footer giúp cho cta vẽ giao diện chung của cả dự án 
            và tất nhiên file default phải nhúng 2 file này vào.

        + folder mixins thì để ta chứa các biến được lặp và sử dụng lại qua các trang 

    - tạo folder model: chứa file liên kết database
        + tạo file product.model để liên kết đến các dữ liệu trong database

- github desktop 1h56 bài 19

luồng chạy: index.routes -> file.routes -> file.controller -> view


*** tạo trang admin

luồng chạy: index.routes -> file.routes -> file.controller -> view

- trong folder controller 
    + tạo folder admin
        + tạo file dashboard.controller để làm trang tổng quan


- trong folder routes
    + tạo admin
        tạo file index.routes để có thể liên kết trang 
            => các trang của admin đểu phải có "/admin" sau localhost:3000

- trong folder config
    + tạo file system lưu các giá trị giống nhau được sử dụng nhiều lần của hệ thống
        VD: tạo 1 biến cho "/admin"

- trong view tạo y hệt như bên client thay vì home thì thay bằng dashboard

- "?availabilityStatus=In+Stock" câu truy vấn tìm kiếm 
    => sau khi có câu lệnh này xong thì mới sử dụng console.log(req.query) 
        để hiển thị query bắt đầu viết hàm lọc

- req.query là các biến sau dấu "?" của url
- còn nếu như bình thường ta muốn tìm biến sau dấu "/"
    thì nó là req.params

bài 19-20: tạo bộ lọc và chức năng tìm kiếm 

bài 21: làm tiếp chức năng tìm kiếm và chức năng phân trang

bài 22: 
- cập nhật trạng thái một sản phẩm 
    +Từ đầu -> 37p: xong phần FE

    +Tiếp -> 1h : xong phần BE
        cài thư viện "npm i method-override" để có thể sử dụng phương thức PATCH trong pug(html)

- cập nhật trạng thái nhiều sản phẩm
    + Tiếp -> 1h50 : xong phần event và giao diện
        cài thư viện "npm install body-parser" thư viện này hỗ trợ phân tích cú pháp dữ liệu cho thằng NodeJS (phần mềm xử lí trung gian)
        => sau khi chúng ta submit dữ liệu sẽ được gửi lên và ta phải dùng thư viện này để thằng NodeJs mới có thể đọc dữ liệu trong phần "req.body"

    + 1h50 -> hết : xong phần controller 
        sử dụng updateMany() của mongoose